{
  "name": "GPL_AzureSqlTable_NA_AzureBlobStorage_Parquet_CDC_Primary_Azure",
  "properties": {
    "activities": [
      {
        "dependsOn": [],
        "linkedServiceName": {
          "referenceName": "SLS_AzureFunctionApp",
          "type": "LinkedServiceReference"
        },
        "name": "AF Get Information Schema SQL",
        "policy": {
          "retry": 0,
          "retryIntervalInSeconds": 30,
          "secureInput": false,
          "secureOutput": false,
          "timeout": "7.00:00:00"
        },
        "type": "AzureFunctionActivity",
        "typeProperties": {
          "body": {
            "type": "Expression",
            "value": "@json(concat('{\"TaskInstanceId\":\"', string(pipeline().parameters.TaskObject.TaskInstanceId), '\",\"ExecutionUid\":\"', string(pipeline().parameters.TaskObject.ExecutionUid), '\",\"RunId\":\"', string(pipeline().RunId), '\",\"TableSchema\":\"', string(pipeline().parameters.TaskObject.Source.TableSchema), '\",\"TableName\":\"', string(pipeline().parameters.TaskObject.Source.TableName),'\"}'))"
          },
          "functionName": "GetInformationSchemaSQL",
          "method": "POST"
        },
        "userProperties": []
      },
      {
        "dependsOn": [
          {
            "activity": "AF Get Information Schema SQL",
            "dependencyConditions": [
              "Succeeded"
            ]
          }
        ],
        "name": "Lookup Get SQL Metadata",
        "policy": {
          "retry": 0,
          "retryIntervalInSeconds": 30,
          "secureInput": false,
          "secureOutput": false,
          "timeout": "7.00:00:00"
        },
        "type": "Lookup",
        "typeProperties": {
          "dataset": {
            "parameters": {
              "Database": {
                "type": "Expression",
                "value": "@pipeline().parameters.TaskObject.Source.System.Database"
              },
              "Schema": {
                "type": "Expression",
                "value": "@pipeline().parameters.TaskObject.Source.TableSchema"
              },
              "Server": {
                "type": "Expression",
                "value": "@pipeline().parameters.TaskObject.Source.System.SystemServer"
              },
              "Table": {
                "type": "Expression",
                "value": "@pipeline().parameters.TaskObject.Source.TableName"
              }
            },
            "referenceName": "GDS_AzureSqlTable_NA_Azure",
            "type": "DatasetReference"
          },
          "firstRowOnly": false,
          "source": {
            "partitionOption": "None",
            "queryTimeout": "02:00:00",
            "sqlReaderQuery": {
              "type": "Expression",
              "value": "@activity('AF Get Information Schema SQL').output.InformationSchemaSQL"
            },
            "type": "AzureSqlSource"
          }
        },
        "userProperties": []
      },
      {
        "dependsOn": [
          {
            "activity": "Lookup Get SQL Metadata",
            "dependencyConditions": [
              "Failed"
            ]
          }
        ],
        "name": "AF Log - Get Metadata Failed",
        "type": "ExecutePipeline",
        "typeProperties": {
          "parameters": {
            "Body": {
              "type": "Expression",
              "value": "@json(concat('{\"TaskInstanceId\":\"', string(pipeline().parameters.TaskObject.TaskInstanceId), '\",\"ExecutionUid\":\"', string(pipeline().parameters.TaskObject.ExecutionUid), '\",\"RunId\":\"', string(pipeline().RunId), '\",\"LogTypeId\":1,\"LogSource\":\"ADF\",\"ActivityType\":\"Get Metadata\",\"StartDateTimeOffSet\":\"', string(pipeline().TriggerTime), '\",\"EndDateTimeOffSet\":\"', string(utcnow()), '\",\"Comment\":\"', encodeUriComponent(string(activity('Lookup Get SQL Metadata').error.message)), '\",\"Status\":\"Failed\"}'))"
            },
            "FunctionName": "Log",
            "Method": "Post"
          },
          "pipeline": {
            "referenceName": "SPL_AzureFunction",
            "type": "PipelineReference"
          },
          "waitOnCompletion": false
        },
        "userProperties": []
      },
      {
        "dependsOn": [
          {
            "activity": "Lookup Get SQL Metadata",
            "dependencyConditions": [
              "Succeeded"
            ]
          }
        ],
        "linkedServiceName": {
          "referenceName": "SLS_AzureFunctionApp",
          "type": "LinkedServiceReference"
        },
        "name": "AF Persist Metadata and Get Mapping",
        "policy": {
          "retry": 0,
          "retryIntervalInSeconds": 30,
          "secureInput": false,
          "secureOutput": false,
          "timeout": "7.00:00:00"
        },
        "type": "AzureFunctionActivity",
        "typeProperties": {
          "body": {
            "type": "Expression",
            "value": "@json(\n concat('{\"TaskInstanceId\":\"',\n string(pipeline().parameters.TaskObject.TaskInstanceId), \n '\",\"ExecutionUid\":\"', \n string(pipeline().parameters.TaskObject.ExecutionUid), \n '\",\"RunId\":\"', string(pipeline().RunId), \n '\",\"StorageAccountName\":\"', \n string(pipeline().parameters.TaskObject.Target.System.SystemServer),\n  '\",\"StorageAccountContainer\":\"', \n  string(pipeline().parameters.TaskObject.Target.System.Container), \n  '\",\"RelativePath\":\"', \n  string(pipeline().parameters.TaskObject.Target.Instance.TargetRelativePath), \n  '\",\"SchemaFileName\":\"', \n  string(pipeline().parameters.TaskObject.Target.SchemaFileName), \n  '\",\"SourceType\":\"', \n  string(pipeline().parameters.TaskObject.Source.System.Type), \n  '\",\"TargetType\":\"', \n  if(\n    contains(\n    string(pipeline().parameters.TaskObject.Target.System.SystemServer),\n    '.dfs.core.windows.net'\n    ),\n   'ADLS',\n   'Azure Blob'), \n  '\",\"Data\":',\n  string(activity('Lookup Get SQL Metadata').output),\n  ',\"MetadataType\":\"SQL\"}')\n)"
          },
          "functionName": "TaskExecutionSchemaFile",
          "method": "POST"
        },
        "userProperties": []
      },
      {
        "dependsOn": [
          {
            "activity": "AF Persist Metadata and Get Mapping",
            "dependencyConditions": [
              "Succeeded"
            ]
          }
        ],
        "name": "GetChangeCount",
        "policy": {
          "retry": 0,
          "retryIntervalInSeconds": 30,
          "secureInput": false,
          "secureOutput": false,
          "timeout": "7.00:00:00"
        },
        "type": "Lookup",
        "typeProperties": {
          "dataset": {
            "parameters": {
              "Database": {
                "type": "Expression",
                "value": "@pipeline().parameters.TaskObject.Source.System.Database"
              },
              "Schema": {
                "type": "Expression",
                "value": "@pipeline().parameters.TaskObject.Source.TableSchema"
              },
              "Server": {
                "type": "Expression",
                "value": "@pipeline().parameters.TaskObject.Source.System.SystemServer"
              },
              "Table": {
                "type": "Expression",
                "value": "@pipeline().parameters.TaskObject.Source.TableName"
              }
            },
            "referenceName": "GDS_AzureSqlTable_NA_Azure",
            "type": "DatasetReference"
          },
          "firstRowOnly": true,
          "source": {
            "partitionOption": "None",
            "queryTimeout": "02:00:00",
            "sqlReaderQuery": {
              "type": "Expression",
              "value": "@replace(\n  pipeline().parameters.TaskObject.Source.SQLStatement,\n  '/*Remove First*/--',\n  ''\n  )"
            },
            "type": "AzureSqlSource"
          }
        },
        "userProperties": []
      },
      {
        "dependsOn": [
          {
            "activity": "GetChangeCount",
            "dependencyConditions": [
              "Succeeded"
            ]
          }
        ],
        "name": "HasChangedRows",
        "type": "IfCondition",
        "typeProperties": {
          "expression": {
            "type": "Expression",
            "value": "@greater(\n  int(\n    activity('GetChangeCount').output.firstRow.ChangeCount\n    )\n,0)"
          },
          "ifTrueActivities": [
            {
              "dependsOn": [
                {
                  "activity": "SetWatermark",
                  "dependencyConditions": [
                    "Succeeded"
                  ]
                }
              ],
              "inputs": [
                {
                  "parameters": {
                    "Database": {
                      "type": "Expression",
                      "value": "@pipeline().parameters.TaskObject.Source.System.Database"
                    },
                    "Schema": {
                      "type": "Expression",
                      "value": "@pipeline().parameters.TaskObject.Source.TableSchema"
                    },
                    "Server": {
                      "type": "Expression",
                      "value": "@pipeline().parameters.TaskObject.Source.System.SystemServer"
                    },
                    "Table": {
                      "type": "Expression",
                      "value": "@pipeline().parameters.TaskObject.Source.TableName"
                    }
                  },
                  "referenceName": "GDS_AzureSqlTable_NA_Azure",
                  "type": "DatasetReference"
                }
              ],
              "name": "IncrementalCopy",
              "outputs": [
                {
                  "parameters": {
                    "FileName": {
                      "type": "Expression",
                      "value": "@pipeline().parameters.TaskObject.Target.DataFileName"
                    },
                    "RelativePath": {
                      "type": "Expression",
                      "value": "@pipeline().parameters.TaskObject.Target.Instance.TargetRelativePath"
                    },
                    "StorageAccountContainerName": {
                      "type": "Expression",
                      "value": "@pipeline().parameters.TaskObject.Target.System.Container"
                    },
                    "StorageAccountEndpoint": {
                      "type": "Expression",
                      "value": "@pipeline().parameters.TaskObject.Target.System.SystemServer"
                    }
                  },
                  "referenceName": "GDS_AzureBlobStorage_Parquet_Azure",
                  "type": "DatasetReference"
                }
              ],
              "policy": {
                "retry": 0,
                "retryIntervalInSeconds": 30,
                "secureInput": false,
                "secureOutput": false,
                "timeout": "7.00:00:00"
              },
              "type": "Copy",
              "typeProperties": {
                "enableStaging": false,
                "sink": {
                  "storeSettings": {
                    "type": "AzureBlobFSWriteSettings"
                  },
                  "type": "ParquetSink"
                },
                "source": {
                  "partitionOption": "None",
                  "queryTimeout": "02:00:00",
                  "sqlReaderQuery": {
                    "type": "Expression",
                    "value": "@replace(\n  replace(\n    replace(\n      pipeline().parameters.TaskObject.Source.SQLStatement,\n      '/*Remove Second*/--',\n      ''\n      ),\n    '/*to_lsn*/',\n    activity('GetChangeCount').output.firstRow.to_lsn\n    ),\n'/*from_lsn*/',\nactivity('GetChangeCount').output.firstRow.from_lsn\n)"
                  },
                  "type": "AzureSqlSource"
                },
                "translator": {
                  "type": "TabularTranslator",
                  "typeConversion": true,
                  "typeConversionSettings": {
                    "allowDataTruncation": true,
                    "treatBooleanAsNumber": false
                  }
                }
              },
              "userProperties": []
            },
            {
              "dependsOn": [],
              "name": "SetWatermark",
              "type": "SetVariable",
              "typeProperties": {
                "value": {
                  "type": "Expression",
                  "value": "@activity('GetChangeCount').output.firstRow.to_lsn"
                },
                "variableName": "NewWatermark"
              },
              "userProperties": []
            },
            {
              "dependsOn": [
                {
                  "activity": "Get Parquet Metadata",
                  "dependencyConditions": [
                    "Succeeded"
                  ]
                }
              ],
              "linkedServiceName": {
                "referenceName": "SLS_AzureFunctionApp",
                "type": "LinkedServiceReference"
              },
              "name": "AF Persist Parquet Metadata",
              "policy": {
                "retry": 0,
                "retryIntervalInSeconds": 30,
                "secureInput": false,
                "secureOutput": false,
                "timeout": "7.00:00:00"
              },
              "type": "AzureFunctionActivity",
              "typeProperties": {
                "body": {
                  "type": "Expression",
                  "value": "@json(\n concat(\n '{\"TaskInstanceId\":\"', \n string(pipeline().parameters.TaskObject.TaskInstanceId), \n '\",\"ExecutionUid\":\"', \n string(pipeline().parameters.TaskObject.ExecutionUid), \n '\",\"RunId\":\"', \n string(pipeline().RunId), \n '\",\"StorageAccountName\":\"', \n string(pipeline().parameters.TaskObject.Target.System.SystemServer), \n '\",\"StorageAccountContainer\":\"', \n string(pipeline().parameters.TaskObject.Target.System.Container), \n '\",\"RelativePath\":\"', \n string(pipeline().parameters.TaskObject.Target.Instance.TargetRelativePath), \n '\",\"SchemaFileName\":\"', \n string(pipeline().parameters.TaskObject.Target.SchemaFileName), \n '\",\"SourceType\":\"', \n string(pipeline().parameters.TaskObject.Source.System.Type), \n '\",\"TargetType\":\"', \n if(\n    contains(\n    string(pipeline().parameters.TaskObject.Target.System.SystemServer),\n    '.dfs.core.windows.net'\n    ),\n   'ADLS',\n   'Azure Blob'), \n '\",\"Data\":',\n string(activity('Get Parquet Metadata').output),\n ',\"MetadataType\":\"Parquet\"}')\n)"
                },
                "functionName": "TaskExecutionSchemaFile",
                "method": "POST"
              },
              "userProperties": []
            },
            {
              "dependsOn": [
                {
                  "activity": "IncrementalCopy",
                  "dependencyConditions": [
                    "Succeeded"
                  ]
                }
              ],
              "name": "Get Parquet Metadata",
              "policy": {
                "retry": 0,
                "retryIntervalInSeconds": 30,
                "secureInput": false,
                "secureOutput": false,
                "timeout": "7.00:00:00"
              },
              "type": "GetMetadata",
              "typeProperties": {
                "dataset": {
                  "parameters": {
                    "FileName": {
                      "type": "Expression",
                      "value": "@pipeline().parameters.TaskObject.Target.DataFileName"
                    },
                    "RelativePath": {
                      "type": "Expression",
                      "value": "@pipeline().parameters.TaskObject.Target.Instance.TargetRelativePath"
                    },
                    "StorageAccountContainerName": {
                      "type": "Expression",
                      "value": "@pipeline().parameters.TaskObject.Target.System.Container"
                    },
                    "StorageAccountEndpoint": {
                      "type": "Expression",
                      "value": "@pipeline().parameters.TaskObject.Target.System.SystemServer"
                    }
                  },
                  "referenceName": "GDS_AzureBlobStorage_Parquet_Azure",
                  "type": "DatasetReference"
                },
                "fieldList": [
                  "structure"
                ],
                "storeSettings": {
                  "recursive": true,
                  "type": "AzureBlobFSReadSettings"
                }
              },
              "userProperties": []
            },
            {
              "dependsOn": [
                {
                  "activity": "AF Persist Parquet Metadata",
                  "dependencyConditions": [
                    "Succeeded"
                  ]
                }
              ],
              "name": "AF Set New Watermark",
              "type": "ExecutePipeline",
              "typeProperties": {
                "parameters": {
                  "Body": {
                    "type": "Expression",
                    "value": "@json(concat('{\"TaskInstanceId\":\"', string(pipeline().parameters.TaskObject.TaskInstanceId), '\",\"ExecutionUid\":\"', string(pipeline().parameters.TaskObject.ExecutionUid), '\",\"RunId\":\"', string(pipeline().RunId), '\",\"TaskMasterId\":\"', string(pipeline().parameters.TaskObject.TaskMasterId),'\",\"TaskMasterWaterMarkColumnType\":\"', 'lsn','\",\"WaterMarkValue\":\"', variables('NewWatermark'), '\"}'))"
                  },
                  "FunctionName": "WaterMark",
                  "Method": "Post"
                },
                "pipeline": {
                  "referenceName": "SPL_AzureFunction",
                  "type": "PipelineReference"
                },
                "waitOnCompletion": false
              },
              "userProperties": []
            },
            {
              "dependsOn": [
                {
                  "activity": "IncrementalCopy",
                  "dependencyConditions": [
                    "Failed"
                  ]
                }
              ],
              "name": "Pipeline AF Log - Copy Failed",
              "type": "ExecutePipeline",
              "typeProperties": {
                "parameters": {
                  "Body": {
                    "type": "Expression",
                    "value": "@json(concat('{\"TaskInstanceId\":\"', string(pipeline().parameters.TaskObject.TaskInstanceId), '\",\"ExecutionUid\":\"', string(pipeline().parameters.TaskObject.ExecutionUid), '\",\"RunId\":\"', string(pipeline().RunId), '\",\"LogTypeId\":1,\"LogSource\":\"ADF\",\"ActivityType\":\"Copy SQL to Storage\",\"StartDateTimeOffSet\":\"', string(pipeline().TriggerTime), '\",\"EndDateTimeOffSet\":\"', string(utcnow()), '\",\"Comment\":\"', encodeUriComponent(string(activity('IncrementalCopy').error.message)), '\",\"Status\":\"Failed\"}'))"
                  },
                  "FunctionName": "Log",
                  "Method": "Post"
                },
                "pipeline": {
                  "referenceName": "SPL_AzureFunction",
                  "type": "PipelineReference"
                },
                "waitOnCompletion": false
              },
              "userProperties": []
            },
            {
              "dependsOn": [
                {
                  "activity": "IncrementalCopy",
                  "dependencyConditions": [
                    "Succeeded"
                  ]
                }
              ],
              "name": "Pipeline AF Log - Copy Succeed",
              "type": "ExecutePipeline",
              "typeProperties": {
                "parameters": {
                  "Body": {
                    "type": "Expression",
                    "value": "@json(concat('{\"TaskInstanceId\":\"', string(pipeline().parameters.TaskObject.TaskInstanceId), '\",\"ExecutionUid\":\"', string(pipeline().parameters.TaskObject.ExecutionUid), '\",\"RunId\":\"', string(pipeline().RunId), '\",\"LogTypeId\":1,\"LogSource\":\"ADF\",\"ActivityType\":\"Copy SQL to Storage\",\"StartDateTimeOffSet\":\"', string(pipeline().TriggerTime), '\",\"EndDateTimeOffSet\":\"', string(utcnow()), '\",\"RowsInserted\":\"', string(activity('IncrementalCopy').output.rowsCopied), '\",\"Comment\":\"\",\"Status\":\"Complete\"}'))"
                  },
                  "FunctionName": "Log",
                  "Method": "Post"
                },
                "pipeline": {
                  "referenceName": "SPL_AzureFunction",
                  "type": "PipelineReference"
                },
                "waitOnCompletion": false
              },
              "userProperties": []
            }
          ]
        },
        "userProperties": []
      }
    ],
    "annotations": [],
    "folder": {
      "name": "ADS Go Fast/Data Movement/SQL-Database-to-Azure-Storage-CDC/Azure/"
    },
    "lastPublishTime": "2022-03-27T00:15:57Z",
    "parameters": {
      "TaskObject": {
        "defaultValue": {
          "DegreeOfCopyParallelism": 1,
          "Enabled": 1,
          "ExecutionEngine": {
            "ADFPipeline": "GPL_AzureSqlTable_NA_AzureBlobFS_Parquet_Azure",
            "EngineId": -1,
            "EngineJson": "{}",
            "EngineName": "ark-stg-adf-ads-irud",
            "ResourceGroup": "dlzdev04",
            "SubscriptionId": "ed1206e0-17c7-4bc2-ad4b-f8d4dab9284f",
            "SystemType": "Datafactory",
            "TaskDatafactoryIR": "Azure"
          },
          "ExecutionUid": "8448eabb-9ba4-4779-865b-29e973431273",
          "KeyVaultBaseUrl": "https://ads-dev-kv-ads-y56o.vault.azure.net",
          "NumberOfRetries": 0,
          "ScheduleMasterId": "-4",
          "Source": {
            "ChunkField": "",
            "ChunkSize": 0,
            "ExtractionSQL": "",
            "IncrementalSQLStatement": "",
            "IncrementalType": "CDC",
            "Instance": {
              "TargetRelativePath": ""
            },
            "SQLStatement": "/*Remove First*/-- DECLARE  @from_lsn binary(10), @to_lsn binary(10);\r\n /*Remove First*/-- SET @from_lsn =sys.fn_cdc_get_min_lsn((SELECT capture_instance FROM cdc.change_tables where source_object_id  = object_id('SalesLT.Product')));  \r\n /*Remove First*/-- SET @to_lsn = sys.fn_cdc_map_time_to_lsn('largest less than or equal',  GETDATE());\r\n /*Remove First*/--  SELECT CONVERT(varchar(max),@to_lsn,1) to_lsn,CONVERT(varchar(max),@from_lsn,1) from_lsn, count(*) ChangeCount FROM cdc.fn_cdc_get_all_changes_SalesLT_Product(@from_lsn, @to_lsn, N'all'); \r\n /*Remove Second*/-- SELECT * FROM cdc.fn_cdc_get_all_changes_SalesLT_Product(convert(binary(10),'/*from_lsn*/',1), convert(binary(10),'/*to_lsn*/',1), N'all');",
            "System": {
              "AuthenticationType": "WindowsAuth",
              "Database": "Adventureworks",
              "PasswordKeyVaultSecretName": "selfhostedsqlpw",
              "SystemId": -1,
              "SystemServer": "(local)",
              "Type": "Azure SQL",
              "Username": "adminuser"
            },
            "TableName": "Customer",
            "TableSchema": "SalesLT",
            "Type": "Table"
          },
          "Target": {
            "DataFileName": "TestFile.parquet",
            "Instance": {
              "TargetRelativePath": ""
            },
            "RelativePath": "",
            "SchemaFileName": "TestFile.json",
            "System": {
              "AuthenticationType": "MSI",
              "Container": "datalakelanding",
              "SystemId": -8,
              "SystemServer": "https://adsdevdlsadsy56oblob.blob.core.windows.net/",
              "Type": "Azure Blob",
              "Username": null
            },
            "Type": "Parquet"
          },
          "TaskExecutionType": "ADF",
          "TaskGroupConcurrency": "10",
          "TaskGroupPriority": 0,
          "TaskInstanceId": 1,
          "TaskMasterId": 2,
          "TaskStatus": "InProgress",
          "TaskType": "SQL Database to Azure Storage"
        },
        "type": "object"
      }
    },
    "variables": {
      "NewWatermark": {
        "type": "String"
      },
      "SQLStatement1": {
        "type": "String"
      },
      "SQLStatement2": {
        "type": "String"
      }
    }
  },
  "type": "Microsoft.DataFactory/factories/pipelines"
}
